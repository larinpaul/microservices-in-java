<!-- https://javatechonline.com/microservices-in-java/ -->

<!-- What is Service Registration & Discovery? -->
<!-- 
They need to detect each other to communicate
This is similar to Java's RMI mechanism,
where you can work with a central registry 
so that RMI processes could find each other.
Microservices has the same obligation -->

<!-- How to enable Load Balancer? -->

<!-- We could use `Ribbon` with Spring Boot in the past to enable load-balancing -->
<!-- Now we can use `Feign Client` & `Eureka` -->
<!-- Below is the dependency to include `Feign Client`. -->

<dependency>
<groupId>org.springframework.cloud</groupId>
<artifactId>spring-cloud-starter-openfeign</artifactId>
</dependency>
<!-- 
In order to work on Feign Client, we can check out
`How to use Feign as a REST client and Load Balancer?`
https://javatechonline.com/how-to-implement-feign-client-in-spring-boot-microservices/
 -->


<!-- Netflix Eureka -->
<!-- 
Netflix Eureka is used to make a kind of server
which can register the microservices & discover them 
whe required by other microservice.
...
Every Microservice will register into the Eureka server with a service id
and Eukera server will have information (port, IP addresses etc.)
of all the microservices running as client applications
...
A service (Spring Boot Appliction in our case)
annotated with @EnableEurekaServer
will work as Eureka server. -->
<dependency>
<!-- Eureka for service registration -->
  <groupId>org.springframework.cloud</groupId>
  <artifactId>spring-cloud-starter-eureka-server</artifactId>
</dependency>
<!-- 
Additionally, you can see 
How to Register & Discover Microservices Using Netflix Eureka
in the context of Microservices in Java
https://javatechonline.com/how-to-register-microservices-in-eureka-server/ -->


<!-- What is API Gateway? -->

API Gatewat is the single entry & exit point of all the microservices in the application
It is also a type of microservice,
that calls all other microservices using Eureka
and it should also be registered with Eureka Server like other microservices.
It generates a class(proxy) based on the service Id provided with the path(URL) using a load balancer client.
Then it selects one Service Instance from Eureka and makes the HTTP call.
...
Eureka never supports making HTTP call to any microservice.
API Gateway helps in implementing Security, applying filters, SSO(Single Sing On), routing etc.

<!-- Zuul Proxy Server -->
<!-- 
Handles all the requests and does the dynamic routing of Microservices
Dynamic routing is nothing but choosing one microservice instance
and make HTTP call based on the load
We also sometimes call it as Zuul Server or Edge Server
We add the @EnableZuulProxy annotation on our main application class
 -->
<dependency>
  <groupId>org.springframework.cloud</groupId>
  <artifactId>spring-cloud-starter-zuul</artifactId>
</dependency>
<!-- ♥ Note : Newer versions of Spring Boot suggests us to use Spring Cloud Gateway in place of Zuul. -->


<!-- Spring Cloud Gateway -->
<!-- 
Spring Cloud Gateway is a simple, yet an effective way to route to APIs.
It also offers implementation of various cross cutting concerns 
such as Security, Logging, Monitoring/metrics etc.
It is built on top of Spring Webflux (A reactive programming approach)
 -->
<dependency>
  <groupId>org.springframework.cloud</groupId>
  <artifactId>spring-cloud-starter-gateway</artifact>
</dependency>
<!-- 
Some important features of the Spring Cloud Gateway are:
1) Match routes on any request attribute
2) Define Predicates & Filters
3) Integrates with Spring Cloud Discovery Client (Load Balancing)
4) Path Rewriting
 -->


<!-- What is a Circuit Breaker? -->
<!-- 
If the actual method of a microservice is continuously throwing exception,
then stop executing actual method and redirect each request
to a fallback method, such concept is called Circuit Breaker.
 -->
<!-- Spring Cloud Hystrix -->
<!-- 
We add the @EnableHystrix annotation on our main application class
to make our Spring Book application act as a CircuitBreaker
In addition, @HystrixCommand(fallbackMethod = "DUMMY METHOD NAME")
at RestController method level.
 -->
<dependency>
  <groupId>org.springframework.cloud</groupId>
  <artifactId>spring-cloud-starter-hystrix</artifactId>
</dependency>


<!-- What is Fault Tolerance in Microservices? -->
<!-- 
...
In order to implement complete Fault Tolerance,
even including circuit breaker, we use Resilience4j API. It has multiple separate modules such as Rate Limiter, Time Limiter, Bulkhead, Circuit Breaker, Retry etc. We have separate annotations for each functionality as @RateLimiter, @TimeLimiter, @Bulkhead, @CircuitBreaker, @Retry respectively. However, we can also implement these functionalities programmatically by using Decorator pattern. Moreover, we require below dependencies to implement Resilience4j. Additionally, you can visit our detailed article on ‘How To Implement Fault Tolerance In Microservices Using Resilience4j?‘ in the context of Microservices in Java..
 -->

<dependency>
<groupId>org.springframework.cloud</groupId>
<artifactId>spring-cloud-starter-circuitbreaker-resilience4j</artifactId>
</dependency>

<dependency>
<gorupId>org,springframework.boot</groupId>
<artifactId>srping-boot-starter-actuator<artifactId>
</dependency>


