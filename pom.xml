<!-- https://javatechonline.com/microservices-in-java/ -->

<!-- What is Service Registration & Discovery? -->
<!-- 
They need to detect each other to communicate
This is similar to Java's RMI mechanism,
where you can work with a central registry 
so that RMI processes could find each other.
Microservices has the same obligation -->

<!-- How to enable Load Balancer? -->

<!-- We could use `Ribbon` with Spring Boot in the past to enable load-balancing -->
<!-- Now we can use `Feign Client` & `Eureka` -->
<!-- Below is the dependency to include `Feign Client`. -->

<dependency>
<groupId>org.springframework.cloud</groupId>
<artifactId>spring-cloud-starter-openfeign</artifactId>
</dependency>
<!-- 
In order to work on Feign Client, we can check out
`How to use Feign as a REST client and Load Balancer?`
https://javatechonline.com/how-to-implement-feign-client-in-spring-boot-microservices/
 -->
