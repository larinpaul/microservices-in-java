<!-- https://javatechonline.com/microservices-in-java/ -->

<!-- What is Service Registration & Discovery? -->
<!-- 
They need to detect each other to communicate
This is similar to Java's RMI mechanism,
where you can work with a central registry 
so that RMI processes could find each other.
Microservices has the same obligation -->

<!-- How to enable Load Balancer? -->

<!-- We could use `Ribbon` with Spring Boot in the past to enable load-balancing -->
<!-- Now we can use `Feign Client` & `Eureka` -->
<!-- Below is the dependency to include `Feign Client`. -->

<dependency>
<groupId>org.springframework.cloud</groupId>
<artifactId>spring-cloud-starter-openfeign</artifactId>
</dependency>
<!-- 
In order to work on Feign Client, we can check out
`How to use Feign as a REST client and Load Balancer?`
https://javatechonline.com/how-to-implement-feign-client-in-spring-boot-microservices/
 -->


<!-- Netflix Eureka -->
<!-- 
Netflix Eureka is used to make a kind of server
which can register the microservices & discover them 
whe required by other microservice.
...
Every Microservice will register into the Eureka server with a service id
and Eukera server will have information (port, IP addresses etc.)
of all the microservices running as client applications
...
A service (Spring Boot Appliction in our case)
annotated with @EnableEurekaServer
will work as Eureka server. -->
<dependency>
<!-- Eureka for service registration -->
  <groupId>org.springframework.cloud</groupId>
  <artifactId>spring-cloud-starter-eureka-server</artifactId>
</dependency>
<!-- 
Additionally, you can see 
How to Register & Discover Microservices Using Netflix Eureka
in the context of Microservices in Java
https://javatechonline.com/how-to-register-microservices-in-eureka-server/ -->


<!-- What is API Gateway? -->

API Gatewat is the single entry & exit point of all the microservices in the application
It is also a type of microservice,
that calls all other microservices using Eureka
and it should also be registered with Eureka Server like other microservices.
It generates a class(proxy) based on the service Id provided with the path(URL) using a load balancer client.
Then it selects one Service Instance from Eureka and makes the HTTP call.
...
Eureka never supports making HTTP call to any microservice.
API Gateway helps in implementing Security, applying filters, SSO(Single Sing On), routing etc.

